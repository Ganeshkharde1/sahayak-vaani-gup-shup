
import { useState, useRef, useEffect } from 'react';
import { Palette, Download, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';

const VisualAids = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [query, setQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const generateDrawing = async () => {
    if (!query.trim()) {
      toast({
        title: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§∑‡§Ø ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§Ç",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    
    setTimeout(() => {
      const canvas = canvasRef.current;
      if (!canvas) return;
      
      const ctx = canvas.getContext('2d');
      if (!ctx) return;

      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Simple drawing based on query (water cycle example)
      ctx.strokeStyle = '#2563eb';
      ctx.lineWidth = 2;
      ctx.fillStyle = '#60a5fa';

      // Draw sun
      ctx.beginPath();
      ctx.arc(100, 80, 30, 0, 2 * Math.PI);
      ctx.fillStyle = '#fbbf24';
      ctx.fill();
      ctx.strokeStyle = '#f59e0b';
      ctx.stroke();

      // Draw cloud
      ctx.beginPath();
      ctx.arc(300, 100, 40, 0, 2 * Math.PI);
      ctx.arc(340, 100, 35, 0, 2 * Math.PI);
      ctx.arc(320, 80, 30, 0, 2 * Math.PI);
      ctx.fillStyle = '#e5e7eb';
      ctx.fill();
      ctx.strokeStyle = '#9ca3af';
      ctx.stroke();

      // Draw water
      ctx.beginPath();
      ctx.fillRect(50, 350, 400, 50);
      ctx.fillStyle = '#3b82f6';
      ctx.fill();

      // Add labels
      ctx.fillStyle = '#1f2937';
      ctx.font = '16px Arial';
      ctx.fillText('‡§∏‡•Ç‡§∞‡•ç‡§Ø', 80, 130);
      ctx.fillText('‡§¨‡§æ‡§¶‡§≤', 290, 170);
      ctx.fillText('‡§™‡§æ‡§®‡•Ä', 230, 390);

      // Add arrows for water cycle
      ctx.strokeStyle = '#ef4444';
      ctx.lineWidth = 3;
      
      // Evaporation arrow
      ctx.beginPath();
      ctx.moveTo(250, 350);
      ctx.lineTo(280, 140);
      ctx.stroke();

      // Rain arrow
      ctx.beginPath();
      ctx.moveTo(320, 140);
      ctx.lineTo(350, 340);
      ctx.stroke();

      setLoading(false);
      toast({
        title: "‡§ö‡§ø‡§§‡•ç‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ!",
        description: "‡§Ü‡§™ ‡§á‡§∏‡•á ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç",
      });
    }, 2000);
  };

  const downloadImage = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const link = document.createElement('a');
    link.download = `visual-aid-${Date.now()}.png`;
    link.href = canvas.toDataURL();
    link.click();

    toast({
      title: "‡§ö‡§ø‡§§‡•ç‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ!",
      description: "‡§´‡§æ‡§á‡§≤ ‡§Ü‡§™‡§ï‡•á ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à",
    });
  };

  const clearCanvas = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  };

  return (
    <div className="space-y-6">
      <Card className="border-purple-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-purple-800">
            <Palette className="w-5 h-5" />
            <span>‡§µ‡§ø‡§ú‡§º‡•Å‡§Ö‡§≤ ‡§è‡§°‡•ç‡§∏ ‡§ú‡•á‡§®‡§∞‡•á‡§ü‡§∞</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§®‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? (‡§ú‡•à‡§∏‡•á: ‡§ú‡§≤ ‡§ö‡§ï‡•ç‡§∞, ‡§∏‡•å‡§∞ ‡§Æ‡§Ç‡§°‡§≤, ‡§™‡•å‡§ß‡•á ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏)
              </label>
              <Input
                placeholder="‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
              />
            </div>
            
            <Button 
              onClick={generateDrawing}
              disabled={loading}
              className="bg-purple-500 hover:bg-purple-600 w-full"
            >
              <Palette className="w-4 h-4 mr-2" />
              {loading ? "‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..." : "‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç"}
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card className="border-gray-200">
        <CardContent className="pt-6">
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <h3 className="font-semibold">üìä ‡§ú‡•á‡§®‡§∞‡•á‡§ü‡•á‡§° ‡§ö‡§ø‡§§‡•ç‡§∞:</h3>
              <div className="space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={downloadImage}
                  className="border-green-300 text-green-700 hover:bg-green-50"
                >
                  <Download className="w-4 h-4 mr-1" />
                  ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={clearCanvas}
                  className="border-red-300 text-red-700 hover:bg-red-50"
                >
                  <Trash2 className="w-4 h-4 mr-1" />
                  ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç
                </Button>
              </div>
            </div>
            
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 bg-white">
              <canvas
                ref={canvasRef}
                width={500}
                height={400}
                className="max-w-full border border-gray-200 rounded"
                style={{ background: '#ffffff' }}
              />
            </div>
            
            <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded">
              <p className="font-medium">üí° ‡§ü‡§ø‡§™:</p>
              <p>‡§Ø‡§π ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡•ç‡§≤‡•à‡§ï‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ü‡§ï‡§æ‡§∞ ‡§î‡§∞ ‡§≤‡•á‡§¨‡§≤ ‡§ï‡•ã ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç‡•§</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VisualAids;
