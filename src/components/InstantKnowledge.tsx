
import { useState } from 'react';
import { Search, BookOpen } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';

const InstantKnowledge = () => {
  const [query, setQuery] = useState('');
  const [response, setResponse] = useState<{
    explanation: string;
    analogy: string;
    keyPoints: string[];
  } | null>(null);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handleSearch = async () => {
    if (!query.trim()) {
      toast({
        title: "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рд▓рд┐рдЦреЗрдВ",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    
    // Simulate AI response
    setTimeout(() => {
      const mockResponse = {
        explanation: `${query} рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ: рдпрд╣ рдПрдХ рдЬрдЯрд┐рд▓ рд╡реИрдЬреНрдЮрд╛рдирд┐рдХ рдШрдЯрдирд╛ рд╣реИ рдЬреЛ рдкреНрд░рдХрд╛рд╢ рдХреЗ рдкреНрд░рдХреАрд░реНрдгрди рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рд╣реИред рдЬрдм рд╕реВрд░реНрдп рдХреА рд░реЛрд╢рдиреА рд╡рд╛рдпреБрдордВрдбрд▓ рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХрд░рддреА рд╣реИ, рддреЛ рдпрд╣ рдЫреЛрдЯреЗ рдХрдгреЛрдВ рд╕реЗ рдЯрдХрд░рд╛рддреА рд╣реИред`,
        analogy: "рдпрд╣ рдмрд┐рд▓реНрдХреБрд▓ рд╡реИрд╕реЗ рд╣реИ рдЬреИрд╕реЗ рдЖрдк рдПрдХ рдкреНрд░рд┐рдЬреНрдо рд╕реЗ рд╕рдлреЗрдж рд░реЛрд╢рдиреА рдХреЛ рдЧреБрдЬрд╛рд░рддреЗ рд╣реИрдВ рдФрд░ рд╡рд╣ рдЗрдВрджреНрд░рдзрдиреБрд╖ рдХреЗ рд░рдВрдЧреЛрдВ рдореЗрдВ рдмрд┐рдЦрд░ рдЬрд╛рддреА рд╣реИред",
        keyPoints: [
          "рдкреНрд░рдХрд╛рд╢ рдХрд╛ рдкреНрд░рдХреАрд░реНрдгрди рдореБрдЦреНрдп рдХрд╛рд░рдг рд╣реИ",
          "рдиреАрд▓рд╛ рд░рдВрдЧ рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдмрд┐рдЦрд░рддрд╛ рд╣реИ",
          "рд╡рд╛рдпреБрдордВрдбрд▓ рдореЗрдВ рдЫреЛрдЯреЗ рдХрдг рдЬрд┐рдореНрдореЗрджрд╛рд░ рд╣реИрдВ",
          "рдпрд╣реА рдХрд╛рд░рдг рд╣реИ рдХрд┐ рд╕реВрд░реНрдпрд╛рд╕реНрдд рдХреЗ рд╕рдордп рдЖрд╕рдорд╛рди рд▓рд╛рд▓ рджрд┐рдЦрддрд╛ рд╣реИ"
        ]
      };
      setResponse(mockResponse);
      setLoading(false);
    }, 2000);
  };

  return (
    <div className="space-y-6">
      <Card className="border-blue-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-blue-800">
            <BookOpen className="w-5 h-5" />
            <span>рддреНрд╡рд░рд┐рдд рдЬреНрдЮрд╛рди рдХреЗрдВрджреНрд░</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Textarea
              placeholder="рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдпрд╣рд╛рдБ рд▓рд┐рдЦреЗрдВ... рдЬреИрд╕реЗ 'рдЖрд╕рдорд╛рди рдиреАрд▓рд╛ рдХреНрдпреЛрдВ рд╣реЛрддрд╛ рд╣реИ?'"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              className="min-h-[100px]"
            />
            <Button 
              onClick={handleSearch}
              disabled={loading}
              className="bg-blue-500 hover:bg-blue-600"
            >
              <Search className="w-4 h-4 mr-2" />
              {loading ? "рдЦреЛрдЬ рд░рд╣реЗ рд╣реИрдВ..." : "рд╕рдордЭрд╛рдПрдВ"}
            </Button>
          </div>
        </CardContent>
      </Card>

      {response && (
        <Card className="border-green-200 bg-green-50">
          <CardContent className="pt-6">
            <div className="space-y-4">
              <div>
                <h3 className="font-semibold text-green-800 mb-2">ЁЯУЪ рд╡реНрдпрд╛рдЦреНрдпрд╛:</h3>
                <p className="text-gray-700">{response.explanation}</p>
              </div>
              
              <div>
                <h3 className="font-semibold text-green-800 mb-2">ЁЯОп рдЖрд╕рд╛рди рдЙрджрд╛рд╣рд░рдг:</h3>
                <p className="text-gray-700 italic">{response.analogy}</p>
              </div>
              
              <div>
                <h3 className="font-semibold text-green-800 mb-2">ЁЯФС рдореБрдЦреНрдп рдмрд╛рддреЗрдВ:</h3>
                <ul className="list-disc list-inside space-y-1">
                  {response.keyPoints.map((point, index) => (
                    <li key={index} className="text-gray-700">{point}</li>
                  ))}
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default InstantKnowledge;
